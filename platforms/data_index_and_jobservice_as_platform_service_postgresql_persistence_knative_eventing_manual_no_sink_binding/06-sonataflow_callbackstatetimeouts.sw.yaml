apiVersion: sonataflow.org/v1alpha08
kind: SonataFlow
metadata:
  name: callbackstatetimeouts
  annotations:
    sonataflow.org/description: Callback State Timeouts Example k8s
    sonataflow.org/version: 0.0.1
    sonataflow.org/profile: preview
spec:
  # In this example we only configure the DB to use, the operator will manage all the rest at build time.
  # 1) add the necessary quarkus extensions related to the persistence
  # 2) add the necessary build time properties related to the persistence in the form of maven build attributes
  persistence:
    postgresql:
      secretRef:
        name: postgres-secrets
        userKey: POSTGRES_USER
        passwordKey: POSTGRES_PASSWORD
      serviceRef:
        name: postgres
        databaseName: sonataflow
  podTemplate:
    container:
      env:
        - name: K_SINK
          value:  http://kafka-broker-ingress.knative-eventing.svc.cluster.local/usecase3-knative-eventing/default
        #          value: http://broker-ingress.knative-eventing.svc.cluster.local/usecase3-knative-eventing/default
        - name: MP_MESSAGING_OUTGOING_KOGITO_JOB_SERVICE_JOB_REQUEST_EVENTS_URL
          value: ${K_SINK}
        - name: MP_MESSAGING_OUTGOING_KOGITO_PROCESSINSTANCES_EVENTS_URL
          value: ${K_SINK}
        - name: MP_MESSAGING_OUTGOING_KOGITO_PROCESSDEFINITIONS_EVENTS_URL
          value: ${K_SINK}
        - name: ORG_KIE_KOGITO_ADDONS_KNATIVE_EVENTING_HEALTH_ENABLED
          value: "true"
    initContainers:
      - name: init-postgres
        image: registry.access.redhat.com/ubi9/ubi-minimal:latest
        imagePullPolicy: IfNotPresent
        command: [ 'sh', '-c', 'until (echo 1 > /dev/tcp/postgres.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local/5432) >/dev/null 2>&1; do echo "Waiting for postgres server"; sleep 3; done;' ]
  flow:
    start: PrintStartMessage
    events:
      - name: callbackEvent
        source: ''
        type: callback_event_type
      - name: exitEvent
        source: ''
        kind: produced
        type: callbackstatetimeouts_exit_event
    functions:
      - name: systemOut
        type: custom
        operation: sysout
    states:
      - name: PrintStartMessage
        type: operation
        actions:
          - name: printSystemOut
            functionRef:
              refName: systemOut
              arguments:
                message: "${\"callback-state-timeouts: \" + $WORKFLOW.instanceId + \" has started.\"}"
        transition: CallbackState
      - name: CallbackState
        type: callback
        action:
          name: callbackAction
          functionRef:
            refName: systemOut
            arguments:
              message: "${\"callback-state-timeouts: \" + $WORKFLOW.instanceId + \" has executed the callbackFunction.\"}"
        eventRef: callbackEvent
        transition: CheckEventArrival
        timeouts:
          eventTimeout: PT30S
      - name: CheckEventArrival
        type: switch
        dataConditions:
          - condition: "${ .eventData != null }"
            transition: EventArrived
        defaultCondition:
          transition: EventNotArrived
      - name: EventArrived
        type: inject
        data:
          exitMessage: "The callback event has arrived."
        transition: PrintExitMessage
      - name: EventNotArrived
        type: inject
        data:
          exitMessage: "The callback event has not arrived, and the timeout has overdue."
        transition: PrintExitMessage
      - name: PrintExitMessage
        type: operation
        actions:
          - name: printSystemOut
            functionRef:
              refName: systemOut
              arguments:
                message: "${\"callback-state-timeouts: \" + $WORKFLOW.instanceId + \" has finalized. \" + .exitMessage + \" eventData: \" + .eventData}"
        end:
          terminate: true
          produceEvents:
            - eventRef: exitEvent
